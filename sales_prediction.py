# -*- coding: utf-8 -*-
"""sales prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xJ_3bHR8HxRhPPMGzzfZy-ARooLJzLU1

impoting the dependies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""data collection and analysis"""

#loading the file from csv to pandas dataframe
big_mart_data = pd.read_csv('/content/Train.csv')
big_mart_data.head()

del big_mart_data['Outlet_Size']

#getting some info about datasets
big_mart_data.info()

big_mart_data.isnull().sum()

#mean value of item weight in column
 big_mart_data['Item_Weight'].mean()

big_mart_data['Item_Weight'].fillna(big_mart_data['Item_Weight'].mean(), inplace = True)

big_mart_data.isnull().sum()

"""Replacing the missing value in outlet suze Mode"""

#mode_of_Outlet_Size = big_mart_data.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))

#print(mode_of_Outlet_Size)

#missing_values = big_mart_data['Outlet_Size'].isnull()

#print(missing_values)

#big_mart_data.loc[missing_values, 'Outlet_Size'] = big_mart_data.loc[missing_values,'Outlet_Type'].apply(lambda x: mode_of_Outlet_Size)

big_mart_data.isnull().sum()

"""data analysis"""

#statiscal measure about the data
big_mart_data.describe()

"""Numerical feautures"""

sns.set()

#Item_Weight plot distribution
plt.figure(figsize = (6,6))
sns.distplot(big_mart_data['Item_Weight'])
plt.show()

#Item_Visibility plot distribution
plt.figure(figsize = (6,6))
sns.distplot(big_mart_data['Item_Visibility'])
plt.show()

#Item_MRP plot distribution
plt.figure(figsize = (6,6))
sns.distplot(big_mart_data['Item_MRP'])
plt.show()

#Item_Outlet_Sales plot distribution
plt.figure(figsize = (6,6))
sns.distplot(big_mart_data['Item_Outlet_Sales'])
plt.show()

#outlet establishment year column
plt.figure(figsize = (6,6))
sns.countplot(x = 'Outlet_Establishment_Year', data = big_mart_data)
plt.show()

#Item_Fat_Content column
plt.figure(figsize = (6,6))
sns.countplot(x = 'Item_Fat_Content', data = big_mart_data)
plt.show()

#Item_Type column
plt.figure(figsize = (32,6))
sns.countplot(x = 'Item_Type', data = big_mart_data)
plt.show()

big_mart_data.head()

"""data preprocessing"""

big_mart_data['Item_Fat_Content'].value_counts()

big_mart_data.replace({'Item_Fat_Content':{'low fat':'Low Fat','LF':'Low Fat','reg':'Regular'}},inplace = True)

big_mart_data['Item_Fat_Content'].value_counts()

"""Label Encoding"""

encoder = LabelEncoder()

big_mart_data['Item_Identifier'] = encoder.fit_transform(big_mart_data['Item_Identifier'])

big_mart_data['Item_Fat_Content'] = encoder.fit_transform(big_mart_data['Item_Fat_Content'])

big_mart_data['Item_Type'] = encoder.fit_transform(big_mart_data['Item_Type'])

big_mart_data['Outlet_Identifier'] = encoder.fit_transform(big_mart_data['Outlet_Identifier'])

#big_mart_data['Outlet_Size'] = encoder.fit_transform(big_mart_data['Outlet_Size'])

big_mart_data['Outlet_Location_Type'] = encoder.fit_transform(big_mart_data['Outlet_Location_Type'])

big_mart_data['Outlet_Type'] = encoder.fit_transform(big_mart_data['Outlet_Type'])

big_mart_data.head()

"""splitting featureand target"""

X = big_mart_data.drop(columns = 'Item_Outlet_Sales',axis = 1)
Y = big_mart_data['Item_Outlet_Sales']

print(X)

print(Y)

"""splitting the data into training data and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""Machine learning model training

XGBboost regressor
"""

regressor = XGBRegressor()

regressor.fit(X_train,Y_train)

"""Evaluating"""

training_data_prediction = regressor.predict(X_train)

# R squared value
r2_train = metrics.r2_score(Y_train,training_data_prediction)

print('R Squared value =', r2_train)

#prediction o test data
test_data_prediction = regressor.predict(X_test)

# R squared value
r2_test = metrics.r2_score(Y_test,test_data_prediction)

print('R Squared value =', r2_test)

